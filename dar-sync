#!/bin/bash

source "/usr/lib/dar/dar-functions"

daropts ":a:d:rs:" $@

set_dists
set_tag

#build_htaccess

### Sign first as we're starting the script.
if [ "$GPG_NAME" -a "$GPG_PATH" ]; then
	echo "Signing (new) packages."
	find $PACKAGEDIR -newer $FTPDIR/extra/state/rpmsign -name "*.rpm" -type f | xargs rpm --resign  \
		--define "_signature gpg" \
		--define "_gpg_path $GPG_PATH" \
		--define "_gpg_name $GPG_NAME"
	if [ $? -eq 0 ]; then
		touch $FTPDIR/extra/state/rpmsign
	elif [ $? -gt 1 ]; then
		echo $?
		exit $?
	fi
fi

if [ "$CREATE_REPO" == "true" ]; then
	echo "Building SRPM repository."
	build_repo_srpms "source"
fi

for dist in $DISTS; do
	if [ -r "$CONFIGDIR/dists/$dist/config" ]; then
		source "$CONFIGDIR/dists/$dist/config"
	else
		warning "Configfile $CONFIGDIR/dists/$dist/config missing. Aborting."
		continue
	fi
	
	if [ "$CREATE_REPO" == "true" ]; then
		echo "Building $dist repository in $DISTPATH."
		ln -sf ../../../../source $FTPDIR/$DISTPATH/SRPMS.dag
		if [ "$REPO_APT" == "yes" ]; then
			build_repo_apt "$DISTTAG" "$DISTPATH"
		fi
		if [ "$REPO_YUM" == "yes" ]; then
			build_repo_yum "$DISTTAG" "$DISTPATH"
		fi
		if [ "$REPO_CREATEREPO" == "yes" ]; then
			build_repo "$DISTPATH"
		fi
	fi
	build_env "$DISTNICK" "$DISTNAME"
	build_content "$DISTNAME" "$DISTPATH"

done

echo -n "Building source package list."
(
	for TAG in $TAGS; do
		find $PACKAGEDIR/ -name "*.$TAG.src.rpm" | sed -e "s|.\+/\(.\+\)-[0-9].\+-[0-9].*\.$TAG\.src\.rpm|\1|" 
	done
) | sort | uniq >$FTPDIR/extra/state/packages-src.list
echo -e "\t($(wc -l $FTPDIR/extra/state/packages-src.list))"

echo -n "Building package list."
cat $FTPDIR/extra/state/packages-*.list | sort | uniq > $FTPDIR/extra/state/packages.list
echo -e "\t($(wc -l $FTPDIR/extra/state/packages.list))"

echo -n "Building summary list."
rm -f $FTPDIR/extra/state/summaries.list

for app in $(cd $PACKAGEDIR; echo *); do
	app="$(basename $app)"
	SPECFILE="$PACKAGEDIR/$app/$app.spec"
	if [ -r "$SPECFILE" ]; then
		echo -e "$app\t$(rpmconf Summary "" nocheck)" >> $FTPDIR/extra/state/summaries.list
	fi
done
echo -e "\t($(wc -l $FTPDIR/extra/state/summaries.list))"

echo -n "Building all package list."
find $PACKAGEDIR/ -name "*.rpm" -printf "%P\n" | sort > $FTPDIR/extra/state/all-packages.list
echo -e "\t($(wc -l $FTPDIR/extra/state/all-packages.list))"

echo -n "Press enter to start remote synchronisation."
read
echo "Starting remote synchronisation."
if [ "$RSYNC_LIMIT" ]; then
	RSYNC_OPTIONS="$RSYNC_OPTIONS --bwlimit=$RSYNC_LIMIT"
fi
#rsync -anvzHL --progress --delete-after $RSYNC_OPTIONS -e /usr/bin/ssh $PACKAGEDIR $FTPDIR $RSYNC_TARGET
#rsync -avHL --progress --delete-after $RSYNC_OPTIONS -e "/usr/bin/ssh -oCompression=no" $PACKAGEDIR $FTPDIR/ $RSYNC_TARGET
rsync -avHl --progress --delete-after $RSYNC_OPTIONS -e "/usr/bin/ssh -oCompression=no" $PACKAGEDIR $FTPDIR/ $RSYNC_TARGET
